//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/UserInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserInputSystem : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserInputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInputSystem"",
    ""maps"": [
        {
            ""name"": ""Input"",
            ""id"": ""05e23714-d473-4e36-9ee4-986efcff7dfc"",
            ""actions"": [
                {
                    ""name"": ""LookingRotation"",
                    ""type"": ""Value"",
                    ""id"": ""9f7216dd-22d1-4688-ab95-b6a972742499"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""InvertVector2(invertX=false)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""15668575-cc5a-4d1b-81d3-f5758f83bffc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenChangeValue"",
                    ""type"": ""Button"",
                    ""id"": ""84c42e23-58f7-4fb7-b9c4-1620cb9d34cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeTime_Down"",
                    ""type"": ""Button"",
                    ""id"": ""b063811d-099b-4093-951d-64124ac1030c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeTime_Up"",
                    ""type"": ""Button"",
                    ""id"": ""c5db002d-3cd2-405c-a707-3bebd0d5b53c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2ad2b8ff-cd89-432e-871a-e6e318df11f0"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.05,y=0.05)"",
                    ""groups"": """",
                    ""action"": ""LookingRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15ac3c99-55e7-4944-bbe2-7273506e60d3"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""862b6eda-27f7-4a70-97cd-26edd0f015a2"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenChangeValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d62396e-4518-425f-b23e-bcc3e39f190a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeTime_Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ad5a8f7-666b-4c2f-a8d5-20f0b3a3ac1c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeTime_Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Input
        m_Input = asset.FindActionMap("Input", throwIfNotFound: true);
        m_Input_LookingRotation = m_Input.FindAction("LookingRotation", throwIfNotFound: true);
        m_Input_Escape = m_Input.FindAction("Escape", throwIfNotFound: true);
        m_Input_OpenChangeValue = m_Input.FindAction("OpenChangeValue", throwIfNotFound: true);
        m_Input_ChangeTime_Down = m_Input.FindAction("ChangeTime_Down", throwIfNotFound: true);
        m_Input_ChangeTime_Up = m_Input.FindAction("ChangeTime_Up", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Input
    private readonly InputActionMap m_Input;
    private IInputActions m_InputActionsCallbackInterface;
    private readonly InputAction m_Input_LookingRotation;
    private readonly InputAction m_Input_Escape;
    private readonly InputAction m_Input_OpenChangeValue;
    private readonly InputAction m_Input_ChangeTime_Down;
    private readonly InputAction m_Input_ChangeTime_Up;
    public struct InputActions
    {
        private @UserInputSystem m_Wrapper;
        public InputActions(@UserInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @LookingRotation => m_Wrapper.m_Input_LookingRotation;
        public InputAction @Escape => m_Wrapper.m_Input_Escape;
        public InputAction @OpenChangeValue => m_Wrapper.m_Input_OpenChangeValue;
        public InputAction @ChangeTime_Down => m_Wrapper.m_Input_ChangeTime_Down;
        public InputAction @ChangeTime_Up => m_Wrapper.m_Input_ChangeTime_Up;
        public InputActionMap Get() { return m_Wrapper.m_Input; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputActions set) { return set.Get(); }
        public void SetCallbacks(IInputActions instance)
        {
            if (m_Wrapper.m_InputActionsCallbackInterface != null)
            {
                @LookingRotation.started -= m_Wrapper.m_InputActionsCallbackInterface.OnLookingRotation;
                @LookingRotation.performed -= m_Wrapper.m_InputActionsCallbackInterface.OnLookingRotation;
                @LookingRotation.canceled -= m_Wrapper.m_InputActionsCallbackInterface.OnLookingRotation;
                @Escape.started -= m_Wrapper.m_InputActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_InputActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_InputActionsCallbackInterface.OnEscape;
                @OpenChangeValue.started -= m_Wrapper.m_InputActionsCallbackInterface.OnOpenChangeValue;
                @OpenChangeValue.performed -= m_Wrapper.m_InputActionsCallbackInterface.OnOpenChangeValue;
                @OpenChangeValue.canceled -= m_Wrapper.m_InputActionsCallbackInterface.OnOpenChangeValue;
                @ChangeTime_Down.started -= m_Wrapper.m_InputActionsCallbackInterface.OnChangeTime_Down;
                @ChangeTime_Down.performed -= m_Wrapper.m_InputActionsCallbackInterface.OnChangeTime_Down;
                @ChangeTime_Down.canceled -= m_Wrapper.m_InputActionsCallbackInterface.OnChangeTime_Down;
                @ChangeTime_Up.started -= m_Wrapper.m_InputActionsCallbackInterface.OnChangeTime_Up;
                @ChangeTime_Up.performed -= m_Wrapper.m_InputActionsCallbackInterface.OnChangeTime_Up;
                @ChangeTime_Up.canceled -= m_Wrapper.m_InputActionsCallbackInterface.OnChangeTime_Up;
            }
            m_Wrapper.m_InputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LookingRotation.started += instance.OnLookingRotation;
                @LookingRotation.performed += instance.OnLookingRotation;
                @LookingRotation.canceled += instance.OnLookingRotation;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
                @OpenChangeValue.started += instance.OnOpenChangeValue;
                @OpenChangeValue.performed += instance.OnOpenChangeValue;
                @OpenChangeValue.canceled += instance.OnOpenChangeValue;
                @ChangeTime_Down.started += instance.OnChangeTime_Down;
                @ChangeTime_Down.performed += instance.OnChangeTime_Down;
                @ChangeTime_Down.canceled += instance.OnChangeTime_Down;
                @ChangeTime_Up.started += instance.OnChangeTime_Up;
                @ChangeTime_Up.performed += instance.OnChangeTime_Up;
                @ChangeTime_Up.canceled += instance.OnChangeTime_Up;
            }
        }
    }
    public InputActions @Input => new InputActions(this);
    public interface IInputActions
    {
        void OnLookingRotation(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnOpenChangeValue(InputAction.CallbackContext context);
        void OnChangeTime_Down(InputAction.CallbackContext context);
        void OnChangeTime_Up(InputAction.CallbackContext context);
    }
}
